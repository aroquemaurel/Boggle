\documentclass[12pt,a4paper,openany]{book}
\usepackage{lmodern}
\usepackage[table]{xcolor}
\input{../includesLaTeX/couleurs.tex}

\usepackage[utf8]{inputenc} \usepackage[T1]{fontenc}
\usepackage{pdfpages}
\usepackage[francais]{babel}
\usepackage[top=1.7cm, bottom=1.7cm, left=1.7cm, right=1.7cm]{geometry}
\usepackage{verbatim}
\usepackage[urlbordercolor={1 1 1}, linkbordercolor={1 1 1}, linkcolor=vert1, urlcolor=bleu, colorlinks=true]{hyperref}
\usepackage{tikz} %Vectoriel
\usepackage{listings}
\usepackage{fancyhdr}
\usepackage{multido}
\usepackage{float}
\usepackage{amssymb}

\newcommand{\titre}{Dossier final}

\newcommand{\pole}{}
\newcommand{\sigle}{}

\newcommand{\semestre}{4}

\input{../includesLaTeX/listings.tex}
%\input{../includesLaTeX/l2/docsProjet2.tex}
\input{./docsProjet.tex}
\input{../includesLaTeX/remarquesExempleAttention.tex}
\input{../includesLaTeX/polices.tex}
\input{../includesLaTeX/affichageChapitre.tex}
\let\pagebreakORIG\pagebreak
\let\clearpageORIG\clearpage
\let\cleardoublepageORIG\cleardoublepage

\ifx \removepagebreak \undefined
\newcommand{\removepagebreak}{\renewcommand{\pagebreak}{}\renewcommand{\clearpage}{}\renewcommand{\cleardoublepage}{}}
\fi

\ifx \restorepagebreak \undefined
\newcommand{\restorepagebreak}{\renewcommand{\pagebreak}{\pagebreakORIG}\renewcommand{\clearpage}{\clearpageORIG}\renewcommand{\cleardoublepage}{\cleardoublepageORIG}}
\fi

\makeatother
\begin{document}
	\setcounter{tocdepth}{1}
	\setcounter{secnumdepth}{3}
	\maketitle
	\chapter*{Avant-propos}
	Ce dossier concerne un projet logiciel développé en langage C : Un jeu de Boggle.

	Il à été conçut par Antoine de \bsc{Roquemaurel} et Fabrice \bsc{Valleix} dans le cadre du module \textit{projet logiciel} de la L2 Informatique de l'université Toulouse III -- Paul Sabatier.

	Ce dossier concerne la conclusion du projet, la manière de compiler et exécuter le programme, nos méthodes de gestions de projet
	et les différents outils que nous avons utilisés afin de développer ce logiciel.


	Le dossier de conception mis à jour par rapport à ce que nous avons effectué est disponible en annexe page \pageref{conception}.

	\tableofcontents
	\vfill
	\footnotesize Rédigé le \today{} par Antoine de \bsc{Roquemaurel} et Fabrice \bsc{Valleix}
	\restorepagebreak
	\chapter{Compilation et exécution}
	\section{Compilation}
	La compilation du projet se fait à l'aide de l'utilitaire \texttt{Make}, ainsi la simple
	commande \texttt{make} à la racine du projet suffit à compiler le projet.

	Cependant, afin de pouvoir compiler le projet, il est indispensable de posséder la
	bibliothèque \textit{Ncurses} sur sa machine, sinon la compilation ne fonctionnerai pas.\\ 
	Il est possible de l'installer avec la commande \texttt{apt-get install libncurses5-dev}
	sur les Linux utilisant le gestionnaire de paquet de Debian.

	Les tests quant à eux se compile à l'aide de la commande \texttt{make test}, cette
	commande va compiler puis exécuter tous les tests, cependant si vous ne possédez pas
	\textit{CUnit} sur votre machine, il est également indispensable de taper la commande
	suivante afin de signaler au système l'emplacement de la bibliothèque.

	\label{ldcunit}
	\begin{lstlisting}[language=sh,numbers=none, caption=Commande execution tests, label=lst:ldcunit]
LD_LIBRARY_PATH=$\$$LD_LIBRARY_PATH:`pwd`/Cunit/lib && export LD_LIBRARY_PATH		
	\end{lstlisting}

	Cette commande doit être employée à chaque ouverture d'une nouvelle console, la variable étant attachée à une seule console.  

	\section{Exécution}
	Afin d'exécuter notre application, vous devez utiliser l'exécutable \texttt{./boggle}, son utilisation est la suivante:

	\begin{lstlisting}[language=sh,numbers=none]
./boggle --solveur|--texte|--ncurses [--grilleFixe]		
	\end{lstlisting}

			Afin d'appeler les différentes fonctionnalités du programme, il
			est nécessaire de faire passer un paramètre, celui-ci peut prendre la forme d'une
			des trois chaines de caractères ci-dessous. Le dernier paramètre est facultatif.
			\begin{description}
				\item[\texttt{-$ $-solveur}] Correspond à la version 1 du projet.
Afin d'appeler la version 1 de l'application, l'exécutable doit être appelé à l'aide de
l'argument \texttt{-$ $-solveur}

Dans cette version, une grille carrée de la taille demandée par l'utilisateur est génére, en
tenant compte de la fréquence des lettres dans la langue Française. Une fois la grille
générée, la position d'une case est demandée à l'utilisateur, l'utilisateur entre donc les
deux coordonnées, et tous les mots commençant par cette case seront affichés à l'écran.

Attention, les coordonnées de la grille commences à zéro.
				\item[\texttt{-$ $-texte}]
					Afin d'appeler la version 2, l'exécutable doit être appelé à l'aide de
					l'argument \texttt{--text}

					Cette version fait appel à la version 1, en effet, au lancement de
					l'application, il est de nouveau demandé la taille de la grille, ensuite
					l'intégralité de la grille générer est résolue. Une fois cette étape
					franchie, l'utilisateur à 3 minutes pour entrer le plus de mots possibles,
					l'application lui signalant si le mot est accepté ou non, une fois ce
					temps impartis, la solution est affichée, puis le nombre de points obtenu
					par le joueur.
				\item[\texttt{-$ $-ncurses}]
					Afin d'appeler la version 3, l'exécutable doit être appelé à l'aide de
					l'argument \texttt{-$ $-ncurses}

					Cette version suit le même principe que la version précédente, à la
					différence près qu'elle utilise la bibliothèque \textit{Ncurses}. Ainsi, la saisie
					des mots se fait dorénavant avec les touches fléchées du clavier, et
					espace pour ajouter une lettre au mot. Pour proposer le mot surligné, la
					touche entrée doit être appuyée. Il est également possible de demander le
					nombre de mots commençant par la case sélectionnée à l'aide de la touche
					h.

					Une fois les 3 minutes écoulées, les mots proposés par l'utilisateur et le
					nombre de points obtenus sont affichés, il est proposé à l'utilisateur
					d'afficher la solution complète. 
				\item[\texttt{-$ $-grilleFixe}] Celui-ci  est optionnel et permet de signaler au programme que vous souhaitez utiliser
			une grille prédéfinie, ainsi l'utilisation de ce dernier paramètre lancera systématiquement le programme avec la même
			grille, et donc la même solution.
			\end{description}

	\chapter{Qualité du code}
		Durant ce projet, nous avons essayés d'avoir le code le plus lisible et réutilisable possible. Ainsi, nous avons utilisés
		plusieurs techniques.
		\section{Convention de codage}
		La première chose afin d'avoir un code propre et uniforme était de nous fixé des conventions de code. En effet, nos styles
		de programmations étant différents, il était important de nous mettre d'accord. Ces conventions ont été écrite sur un wiki
		afin que nous puissions tout deux les consulter, celles-ci sont disponibles annexe \ref{conventions}. 

		Ces conventions fixent la mise en forme du code, elles contiennent principalement l'écriture des noms de variables ou paramètres, 
		les noms de fonctions, la forme de l'indentation.
		\section{Documentation}
		Afin d'avoir un code clair pour nous, tout en pouvant document notre code pour une personne exterieur, nous avons utilisé un
		outil appelé \textit{Doxygen}. De la même manière que Javadoc, nous devons documenter les entêtes de fonctions, structures
		ou variable avec une syntaxe précise, ces commentaires nous permettent de relire facilement le code en le comprenant bien.
		De plus, l'analyse de ceux-ci avec \textit{doxygen} permet de générer une documentation HTML ou PDF \footnote{Celle-ci est générée à l'aide de \LaTeX}).

		La documentation du projet est ainsi disponible :
		\begin{itemize}
			\item Sur le Web à l'adresse \url{http://documentation.joohoo.fr/L2/jeuDeBoggle/index.html}.
			\item En PDF, dans l'archive donnée avec ce projet dans \texttt{doc/documentation.pdf}.
			\item Tous les fichiers HTML sont disponibles dans \texttt{doc/html/}. 
		\end{itemize}
		\section{Utilisation de \textit{Sonar}}
		Afin d'avoir le code le plus propre possible, nous avons utilisé un outil appelé Sonar (Cf figure \ref{fig:sonar}), celui-ci
		nous signale lorsque nous ne respectons pas ses conventions, nous donne les complexités du code, analyse la duplication de
		code, ... 
		Au niveau de ses conventions de programmation, il existe une multitude de règles à ne pas violer comme l'utilisation de
		break en dehors de \texttt{switch}, une complexité trop importante pour une fonction, une boucle \texttt{while} pouvant être transformée en \texttt{for} etc\ldots 

	\begin{figure}[H]
		\centering
		\includegraphics[width=18cm]{screens/sonar.png}
		\caption{Affichage du tableau de bord de \textit{Sonar}}
		\label{fig:sonar}
	\end{figure}
	Sur la figure \ref{fig:sonar}, nous pouvons observer le nombre de ligne effective du programme (nombres de lignes sans compter
	les commentaires), le nombre de fichiers, la complexité par fonction/fichier, la duplication de code, les violations par rapport aux règles de Sonar. 

	\chapter{Tests}
	\section{Tests unitaires avec \textit{CUnit}}
	Tous les tests unitaires du projet ont été effectués à l'aide de \textit{CUnit}. \textit{CUnit} est une bibliothèque en C
	permettant d'effectuer des tests unitaires simplement.

	De plus, étant donné que nous utilisions l'IDE\footnote{Integrated Development Environment} \textit{Netbeans}, celui-ci
	intégrait parfaitement cette bibliothèque. Ainsi, c'est lui qui nous a généré une partie du code permettant les tests, également
	il montrait une barre de progression comme le montre la figure \ref{fig:tests}.
	\begin{figure}[H]
		\centering
		\includegraphics[width=18cm]{screens/tests.png}
		\caption{Affichage des demandes dans \textit{Redmine}}
		\label{fig:tests}
	\end{figure}

	Afin de développer un tests en \textit{CUnit}, il faut utiliser des macros spécifique, celle-ci retournant vrai si le test passe
	ou faux sinon. Le listing \ref{lst:cunit} montre les principales macros.

\begin{lstlisting}[language=C, label=lst:cunit]
CU_ASSERT(bool); // Expression booléenne vraie
CU_ASSERT_FALSE(bool); // Expression booléenne faux
    
CU_ASSERT_EQUAL(actual, expected); // Nombres egaux
CU_ASSERT_NOT_EQUAL(atual, expected); // Nombres différents
    
CU_ASSERT_PTR_NOT_NULL(ptr); // Pointeur non null
CU_ASSERT_PTR_NULL(ptr); // Pointeur null
    
CU_ASSERT_STRING_EQUAL(actual, expected); // Chaine égales
CU_ASSERT_STRING_NOT_EQUAL(actual, expected); // Chaines différentes
\end{lstlisting}

Nous avons ainsi utiliser ces macros pour tester le projet, bien que nous avons utilisé Netbeans afin de vérifier que les
différentes tests passent, il est possible de les exécuter en console. Pour cela, il faut effectuer la manipulation comme expliquée
section \ref{ldcunit} dans le listing \ref{lst:ldcunit}. 

Il est donc possible soit d'effectuer tous les tests à la suite à l'aide de la commande \texttt{make test}, qui va compiler les
tests puis les exécuter, comme le montre le listing \ref{lst:alltests}.
\begin{lstlisting}[language=SH, caption=Execution des tests, label=lst:alltests]

\end{lstlisting}
	\chapter{Gestion de projet}
	Pour ce projet, nous étions deux à travailler dessus, ainsi nous avons utilisé plusieurs techniques afin de se coordonner et de limiter les problèmes. Ceci n'est pas notre premier projet ensemble, notre travail en fut simplifié.
	\section{Un outil de gestion de projet : \textit{Redmine}}
	Pour le projet, nous avons utiliser \textit{Redmine}, une plateforme web de gestion de projet (Cf figure \ref{fig:redmine}). Elle nous a permis de simplifier le travail, et de ne rien oublier.
	En effet, nous pouvons créer des tâches, signaler qu'elles sont en cours/terminés/en tests, leur donner des dates limites, les affecter à une personne etc\ldots
	Ainsi lorsque l'un de nous commençait une tâche, il le signalait sur le \textit{redmine}, ce qui permettait de tenir au courant son binôme de ses actions et
	de l'avancée du projet.
	\begin{figure}[H]
		\centering
		\includegraphics[width=18cm]{screens/redmine.png}
		\caption{Affichage des demandes dans \textit{Redmine}}
		\label{fig:redmine}
	\end{figure}
	Comme le montre la figure \ref{fig:redmine}, nous avons la possibilité de lister toutes les tâches, nous pouvons voir à qui
	elles sont assignées, leurs dates limites, leur hiérarchie etc\ldots

	\textit{Redmine} génère également un diagramme de Gantt,
	nous avons donc utilisé cet utilitaire pour nos
	diagrammes de Gantt\footnote{Disponible en annexe page
	\pageref{gantt}} et
	la liste de nos tâches.

	C'est également sur le wiki de \textit{Redmine} qu'était disponible les conventions d'écritures, mais également des notes sur le
	contrôle de la qualité d'un code, et enfin le fonctionnement de \textit{Git} et \textit{Doxygen}.

	\section{Un logiciel de versionnement : Git}
	Afin de limiter les problèmes du travail collaboratif, nous avons utilisé un logiciel de versionnement Git. Il a deux intérêt, tout d'abord, nous pouvons
	travailler à deux en parallèle sur le projet sans se soucier de fusionner notre travail\footnote{À condition de ne pas travailler sur deux lignes de code identiques}.

	D'autre part, tous les logs étant enregistrés, nous pouvons savoir qui à fait quoi et quel jour, cela permet de voir également l'avancée du projet. 

	Enfin, toutes les modification sont stockées sur le serveur, ainsi en cas de problème, il est très facile de revenir à la version précédente ou même de
	comparer deux versions afin de voir les changements et de comprendre rapidement pourquoi une fonctionnalité a régressé. 
	\appendix
	\include{conventionsEcritures}
	\label{gantt}
	\addcontentsline{toc}{chapter}{B~~Diagramme de Gantt}
	\includepdf[landscape, pages=1-2]{boggle-gantt.pdf}
	\label{conception}
	\addcontentsline{toc}{chapter}{C~~Dossier de conception (Mis à jour)}
	\includepdf[pages=1-]{conception.pdf} %TODO
\end{document}
